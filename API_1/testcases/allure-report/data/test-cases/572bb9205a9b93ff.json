{
  "uid" : "572bb9205a9b93ff",
  "name" : "test_login[cases0]",
  "fullName" : "test_login.TestLogin#test_login",
  "historyId" : "a7f9ba5ce8a9872882ea5ad2aa79d11d",
  "time" : {
    "start" : 1583765320910,
    "stop" : 1583765321109,
    "duration" : 199
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert {'code': '201..., 'status': 0} == {'code': '2010..., 'status': 0}\n  Omitting 3 identical items, use -vv to show\n  Differing items:\n  {'code': '2010'} != {'code': '20103'}\n  Use -v to get the full diff",
  "statusTrace" : "self = <API_1.testcases.test_login.TestLogin object at 0x000000000CFA1FD0>, cases = <API_1.common.do_excel.Case object at 0x000000000CF7B240>\n\n    @allure.story('测试场景')\n    @allure.suite('登录测试用例')\n    @pytest.mark.parametrize('cases',case)\n    def test_login(self,cases):\n        # global loger\n        allure.attach('请求参数：{}'.format(cases.data))\n        self.loger.loggers('INFO','请求方式:{};请求地址:{};请求参数:{}'.format(cases.method,cases.url,cases.data))\n        resp=self.http.requests(cases.method,url=cases.url,data=eval(cases.data))\n        allure.attach('响应结果:{}'.format(resp.text))\n        cases.actual=json.loads(resp.text)\n        self.loger.loggers('INFO','响应报文:{}'.format(cases.actual))\n        try:\n            assert (eval(cases.expected)==cases.actual)\n            cases.result='PASS'\n        except AssertionError as e:\n            cases.result='FAIL'\n            self.loger.loggers('ERROR','报错原因:{}'.format(e))\n>           raise e\n\ntest_login.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <API_1.testcases.test_login.TestLogin object at 0x000000000CFA1FD0>, cases = <API_1.common.do_excel.Case object at 0x000000000CF7B240>\n\n    @allure.story('测试场景')\n    @allure.suite('登录测试用例')\n    @pytest.mark.parametrize('cases',case)\n    def test_login(self,cases):\n        # global loger\n        allure.attach('请求参数：{}'.format(cases.data))\n        self.loger.loggers('INFO','请求方式:{};请求地址:{};请求参数:{}'.format(cases.method,cases.url,cases.data))\n        resp=self.http.requests(cases.method,url=cases.url,data=eval(cases.data))\n        allure.attach('响应结果:{}'.format(resp.text))\n        cases.actual=json.loads(resp.text)\n        self.loger.loggers('INFO','响应报文:{}'.format(cases.actual))\n        try:\n>           assert (eval(cases.expected)==cases.actual)\nE           AssertionError: assert {'code': '201..., 'status': 0} == {'code': '2010..., 'status': 0}\nE             Omitting 3 identical items, use -vv to show\nE             Differing items:\nE             {'code': '2010'} != {'code': '20103'}\nE             Use -v to get the full diff\n\ntest_login.py:30: AssertionError",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1583765320847,
      "stop" : 1583765320908,
      "duration" : 61
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert {'code': '201..., 'status': 0} == {'code': '2010..., 'status': 0}\n  Omitting 3 identical items, use -vv to show\n  Differing items:\n  {'code': '2010'} != {'code': '20103'}\n  Use -v to get the full diff",
    "statusTrace" : "self = <API_1.testcases.test_login.TestLogin object at 0x000000000CFA1FD0>, cases = <API_1.common.do_excel.Case object at 0x000000000CF7B240>\n\n    @allure.story('测试场景')\n    @allure.suite('登录测试用例')\n    @pytest.mark.parametrize('cases',case)\n    def test_login(self,cases):\n        # global loger\n        allure.attach('请求参数：{}'.format(cases.data))\n        self.loger.loggers('INFO','请求方式:{};请求地址:{};请求参数:{}'.format(cases.method,cases.url,cases.data))\n        resp=self.http.requests(cases.method,url=cases.url,data=eval(cases.data))\n        allure.attach('响应结果:{}'.format(resp.text))\n        cases.actual=json.loads(resp.text)\n        self.loger.loggers('INFO','响应报文:{}'.format(cases.actual))\n        try:\n            assert (eval(cases.expected)==cases.actual)\n            cases.result='PASS'\n        except AssertionError as e:\n            cases.result='FAIL'\n            self.loger.loggers('ERROR','报错原因:{}'.format(e))\n>           raise e\n\ntest_login.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <API_1.testcases.test_login.TestLogin object at 0x000000000CFA1FD0>, cases = <API_1.common.do_excel.Case object at 0x000000000CF7B240>\n\n    @allure.story('测试场景')\n    @allure.suite('登录测试用例')\n    @pytest.mark.parametrize('cases',case)\n    def test_login(self,cases):\n        # global loger\n        allure.attach('请求参数：{}'.format(cases.data))\n        self.loger.loggers('INFO','请求方式:{};请求地址:{};请求参数:{}'.format(cases.method,cases.url,cases.data))\n        resp=self.http.requests(cases.method,url=cases.url,data=eval(cases.data))\n        allure.attach('响应结果:{}'.format(resp.text))\n        cases.actual=json.loads(resp.text)\n        self.loger.loggers('INFO','响应报文:{}'.format(cases.actual))\n        try:\n>           assert (eval(cases.expected)==cases.actual)\nE           AssertionError: assert {'code': '201..., 'status': 0} == {'code': '2010..., 'status': 0}\nE             Omitting 3 identical items, use -vv to show\nE             Differing items:\nE             {'code': '2010'} != {'code': '20103'}\nE             Use -v to get the full diff\n\ntest_login.py:30: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "fe6fecf83d2af1e0",
      "name" : "6c18ff37-79dd-4287-b5b2-7c185d5c187d-attachment.attach",
      "source" : "fe6fecf83d2af1e0.attach",
      "type" : "text/plain",
      "size" : 48
    }, {
      "uid" : "78f0be8d89c939c6",
      "name" : "63d8783c-ce9e-4612-8434-270864c45b32-attachment.attach",
      "source" : "78f0be8d89c939c6.attach",
      "type" : "text/plain",
      "size" : 82
    }, {
      "uid" : "c1353c1d2714bc33",
      "name" : "583e6464-72ba-4d36-9445-64a28bc21335-attachment.attach",
      "source" : "c1353c1d2714bc33.attach",
      "type" : "text/plain",
      "size" : 17
    }, {
      "uid" : "5acd260552bc8d68",
      "name" : "log",
      "source" : "5acd260552bc8d68.txt",
      "type" : "text/plain",
      "size" : 700
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "attachmentsCount" : 4,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1583765322286,
      "stop" : 1583765322286,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "测试场景"
  }, {
    "name" : "suite",
    "value" : "登录测试用例"
  }, {
    "name" : "feature",
    "value" : "登录接口"
  }, {
    "name" : "subSuite",
    "value" : "TestLogin"
  }, {
    "name" : "host",
    "value" : "WIN-SE0CJLLHE5T"
  }, {
    "name" : "thread",
    "value" : "9324-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_login"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "cases",
    "value" : "<API_1.common.do_excel.Case object at 0x000000000CF7B240>"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "572bb9205a9b93ff.json",
  "parameterValues" : [ "<API_1.common.do_excel.Case object at 0x000000000CF7B240>" ]
}